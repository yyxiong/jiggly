// Generated by CoffeeScript 1.10.0
(function() {
  var FileNotFoundError, _, blocks, componentsPartials, env, fileWatcher, findComponentLayout, findLayouts, fs, getComponentViewPath, getRealPath, glob, handlebars, layouts, normalizePath, registerComponentLayout, registerLayout, renderFromRealPath, templateLoader;

  _ = require("lodash");

  fs = require("fs");

  glob = require("glob");

  fileWatcher = require("../file_watcher");

  env = require("../enviroments");

  templateLoader = require("./template_loader");

  handlebars = require("handlebars");

  FileNotFoundError = require("../errors").FileNotFoundError;

  require("./helpers");

  env.extraHelpers.forEach(function(helperPath) {
    var e, error;
    try {
      return require(helperPath)(handlebars);
    } catch (error) {
      e = error;
      return console.error("error when load extra helper file: " + helperPath, e);
    }
  });

  blocks = {};

  componentsPartials = [];

  registerComponentLayout = function(filePath) {
    var name, t;
    if (!/\.hbs$/.test(filePath)) {
      return;
    }
    t = fs.readFileSync(filePath);
    name = filePath.slice(env.componentsHome.length + 1).split(".")[0];
    name = "component:" + name;
    componentsPartials.push(name);
    return handlebars.registerPartial(name, handlebars.compile(t.toString()));
  };

  findComponentLayout = function() {
    var filePaths;
    filePaths = glob.sync(env.componentsHome + '/**/{all_templates,other_templates,templates}/*.hbs');
    return _.map(filePaths, registerComponentLayout);
  };

  findComponentLayout();

  handlebars.registerHelper("partial", function(name, options) {
    var block;
    if (!(block = blocks[name])) {
      block = blocks[name] = [];
    }
    block.push(options.fn(this));
    return void 0;
  });

  handlebars.registerHelper("block", function(name, options) {
    var block, content;
    block = blocks[name] || [];
    if (block.length === 0) {
      if (options.fn) {
        return options.fn(this);
      } else {
        return "";
      }
    } else {
      content = block.join("\n");
      blocks[name] = [];
      return content;
    }
  });

  registerLayout = function(filePath) {
    var name, t;
    if (!/\.hbs$/.test(filePath)) {
      return;
    }
    t = fs.readFileSync(filePath);
    name = filePath.slice(env.viewsHome.length + 1).split(".")[0];
    if (env.oldMode) {
      name = "views/" + name;
    }
    return handlebars.registerPartial(name, handlebars.compile(t.toString()));
  };

  layouts = [];

  findLayouts = function(dir) {
    var files;
    files = fs.readdirSync(dir);
    return files.forEach(function(file) {
      var filePath;
      filePath = dir + "/" + file;
      if (fs.statSync(filePath).isDirectory()) {
        return findLayouts(filePath);
      } else {
        return layouts.push(filePath);
      }
    });
  };

  findLayouts(env.viewsHome);

  layouts.forEach(function(file) {
    return registerLayout(file);
  });

  fileWatcher.watchFiles(env.viewsHome, function(filePath) {
    var err, error;
    if (!fs.existsSync(filePath)) {
      return;
    }
    if (fs.statSync(filePath).isDirectory()) {
      return;
    }
    try {
      registerLayout(filePath);
      return console.log("[Layout Reload] " + filePath);
    } catch (error) {
      err = error;
      return console.log("Layout Reload Error] " + filePath + " - " + err);
    }
  });

  normalizePath = function(path) {
    if (path[0] === "/") {
      return path.slice(1);
    } else {
      return path;
    }
  };

  getRealPath = function(path) {
    if (env.pageMode) {
      return env.viewsHome + "/" + (normalizePath(path)) + "/view.hbs";
    } else {
      return env.viewsHome + "/" + (normalizePath(path)) + ".hbs";
    }
  };

  getComponentViewPath = function(path) {
    return env.componentsHome + "/" + (normalizePath(path)) + "/view.hbs";
  };

  renderFromRealPath = function(path, context) {
    var template;
    template = templateLoader.fromPathSync(path);
    return template(context);
  };

  module.exports = {
    renderFile: function(path, context) {
      return renderFromRealPath(getRealPath(path), context);
    },
    renderComponent: function(path, context) {
      var err, error;
      context = context || {};
      context[this.CONST.COMP_PATH] = path;
      try {
        return renderFromRealPath(getComponentViewPath(path), context);
      } catch (error) {
        err = error;
        if (err instanceof FileNotFoundError) {
          console.log("[Component Not Found] " + err.path);
          return "component view not found: " + err.path;
        } else {
          throw err;
        }
      }
    },
    CONST: {
      COMP_PATH: "COMP_PATH"
    }
  };

  require("./render_helpers");

}).call(this);
